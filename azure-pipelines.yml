# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
  branches:
    include:
      - master
      - develop
      - release/*
      - hotfix/*

pool:
  vmImage: ubuntu-latest

variables:
  solution: "**/*.sln"
  buildPlatform: "Any CPU"
  buildConfiguration: "Release"

jobs:
  - job: setVars
    displayName: "Set variables to use"
    pool:
      vmImage: "ubuntu-latest"
    steps:
      - script: |
          if [[ -f global.json ]]; then
            rm global.json
          fi
      - task: gitversion/setup@0
        displayName: Install GitVersion
        inputs:
          versionSpec: "5.6.11"
      - task: gitversion/execute@0
        displayName: Determine Version
      - script: |
          echo '##vso[task.setvariable variable=semVer;isOutput=true]$(GitVersion.SemVer)'
          echo $(GitVersion.SemVer)
          echo '##vso[task.setvariable variable=fullSemVer;isOutput=true]$(GitVersion.FullSemVer)'
          echo $(GitVersion.fullSemVer)

        displayName: "bash script to set required variables"
        name: vars

  - job: DotNetCoreBuild
    displayName: Build and Test DotNetCore App
    dependsOn:
      - setVars
    variables:
      buildConfiguration: "Release"
      semVer: $[ dependencies.setVars.outputs['vars.semVer'] ]
      fullSemVer: $[ dependencies.setVars.outputs['vars.fullSemVer'] ]

    steps:
      - script: |
          echo $(semVer)
          echo $(shortSha)

      - task: UseDotNet@2
        displayName: "Use .NET Core sdk"
        inputs:
          version: 5.0.x

      - task: DotNetCoreCLI@2
        displayName: Build
        inputs:
          command: build
          arguments: "--configuration $(buildConfiguration)"

      - task: DotNetCoreCLI@2
        displayName: Publish
        inputs:
          command: publish
          publishWebProjects: false
          zipAfterPublish: false
          modifyOutputPath: false
          arguments: "--configuration $(buildConfiguration)"

      - task: DotNetCoreCLI@2
        inputs:
          command: "pack"
          # packagesToPack: '**/*.csproj'
          nobuild: true
          includesymbols: true
          includesource: true
          versioningScheme: "byEnvVar"
          versionEnvVar: "PACKAGE_VERSION"
          verbosityPack: "Minimal"
        env:
          PACKAGE_VERSION: $(fullSemVer)
#      - task: DotNetCoreCLI@2
#        displayName: Pack
#        inputs:
#          command: pack
#          arguments: "--no-build --verbosity Minimal -p:PackageVersion=$(semVer) -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg"
#      - task: NuGetAuthenticate@0
#        inputs:
#          nuGetServiceConnections: "<NAME_OF_YOUR_NUGET_SERVICE_CONNECTION>"
#
#      - task: NuGetCommand@2
#        inputs:
#          command: push
#          nuGetFeedType: external
#          versioningScheme: "byEnvVar"
#          versionEnvVar: "PACKAGE_VERSION"
#        env:
#          PACKAGE_VERSION: $(semVer)
