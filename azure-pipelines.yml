# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
  branches:
    include:
      - master
      - develop
      - release/*
      - hotfix/*

pool:
  vmImage: ubuntu-latest

variables:
  solution: "**/*.sln"
  buildPlatform: "Any CPU"
  buildConfiguration: "Release"

jobs:
  - job: setVars
    displayName: "Set variables to use"
    pool:
      vmImage: "ubuntu-latest"
    steps:
      - script: |
          if [[ -f global.json ]]; then
            rm global.json
          fi
      - task: gitversion/setup@0
        displayName: Install GitVersion
        inputs:
          versionSpec: "5.6.11"
      - task: gitversion/execute@0
        displayName: Determine Version
      - script: |
          echo '##vso[task.setvariable variable=semVer;isOutput=true]$(GitVersion.SemVer)'
          echo $(GitVersion.SemVer)
          echo '##vso[task.setvariable variable=fullSemVer;isOutput=true]$(GitVersion.FullSemVer)'
          echo $(GitVersion.fullSemVer)

        displayName: "bash script to set required variables"
        name: vars

  - job: DotNetCoreBuild
    displayName: Build and Test DotNetCore App
    dependsOn:
      - setVars
    variables:
      buildConfiguration: "Release"
      semVer: $[ dependencies.setVars.outputs['vars.semVer'] ]
      fullSemVer: $[ dependencies.setVars.outputs['vars.fullSemVer'] ]
    pool:
      vmImage: windows-latest

    steps:
      #- script: |
      #  echo $(semVer)

      - task: UseDotNet@2
        displayName: "Use .NET Core sdk"
        inputs:
          version: 5.0.x

      - task: DotNetCoreCLI@2
        displayName: "dotnet tool restore"
        inputs:
          command: "custom"
          custom: "tool"
          arguments: "restore"

      - task: DotNetCoreCLI@2
        displayName: Build solution
        inputs:
          command: build
          arguments: "--configuration $(buildConfiguration) /p:Version=$(semVer) /p:ContinuousIntegrationBuild=true /p:EmbedUntrackedSources=true"

      - task: DotNetCoreCLI@2
        displayName: "dotnet pack"
        inputs:
          command: "custom"
          custom: "pack"
          arguments: "--no-build --configuration $(buildConfiguration) --include-symbols --include-source /p:SymbolPackageFormat=snupkg /p:PackageVersion=$(semVer) --output $(Build.ArtifactStagingDirectory)"

      - task: NuGetAuthenticate@0
        inputs:
          forceReinstallCredentialProvider: true

      - task: DotNetCoreCLI@2
        displayName: "dotnet push *.nupkg"
        inputs:
          command: "push"
          #packagesToPush: "$(Build.ArtifactStagingDirectory)/*.nupkg;$(Build.ArtifactStagingDirectory)/*.snupkg"
          packagesToPush: "$(Build.ArtifactStagingDirectory)/*.nupkg"
          nuGetFeedType: "internal"
          publishVstsFeed: "nuget-feed"

      - task: PublishSymbols@2
        inputs:
          SearchPattern: "**/bin/**/*.pdb"
          SymbolServerType: "TeamServices"
          TreatNotIndexedAsWarning: true
          SymbolsVersion: "$(semVer)"

      #- task: NuGetCommand@2
      #  inputs:
      #    command: "push"
      #    packagesToPush: "$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg"
      #    nuGetFeedType: "internal"
      #    publishVstsFeed: "afdc79d2-fcd6-4c6c-8158-fca14f5a834c"
      #    allowPackageConflicts: true
